name: sp-demo-java-app-CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Build stage
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Download SeaLights Java Agent
      - name: Download SeaLights Java Agent
        run: |
          wget -nv https://agents.sealights.co/sealights-java/sealights-java-latest.zip
          unzip -oq sealights-java-latest.zip -d sealights
          echo "SeaLights Java Agent version used is:"
          cat sealights/sealights-java-version.txt

      # Generate SeaLights Session ID with -config
      - name: Generate SeaLights Session ID
        env:
          SL_TOKEN: ${{ secrets.SL_TOKEN }}
          SL_APPNAME: ${{ secrets.SL_APPNAME }}
          SL_BUILDNAME: "build-${{ github.run_id }}"
          SL_BRANCHNAME: "${{ github.ref_name }}"
        run: |
          # Run the -config command (output goes to logs)
          echo "SL.config running config command to generate session ID..."
          java -jar sealights/sl-build-scanner.jar -config \
            -appname "$SL_APPNAME" \
            -buildname "$SL_BUILDNAME" \
            -branchname "$SL_BRANCHNAME" \
            -token "$SL_TOKEN" \
            -pi "com.sealights.demoapp.*"
          echo "Output from SL.config command (session ID should be in buildSessionId.txt):"
          cat buildSessionId.txt

      # Upload Session ID as an artifact
      - name: Upload Session ID
        uses: actions/upload-artifact@v4
        with:
          name: session-id
          path: buildSessionId.txt

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew bootBuildImage

      # Scan the build with SeaLights
      - name: Scan Build with SeaLights
        env:
          SL_TOKEN: ${{ secrets.SL_TOKEN }}
        run: |
          # Read the session ID directly from buildSessionId.txt
          SESSION_ID=$(cat buildSessionId.txt)
          echo "Session ID: $SESSION_ID"
          
          # SL.scan the scan command (output goes to logs)
          echo "Scanning build with SeaLights..."
          java -jar sealights/sl-build-scanner.jar -scan \
            -token "$SL_TOKEN" \
            -buildsessionid "$SESSION_ID" \
            -workspacepath "build/libs" \
            -fi "*.jar" || {
              echo "Error: Scan command failed."
              exit 1
            }

      - name: Build Docker image
        run: docker build -t sp-demo-java-app .

      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Set up gcloud CLI
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Configure Docker to use gcloud for Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Push Docker image to Artifact Registry
      - name: Push Docker image to Artifact Registry
        run: |
          docker tag sp-demo-java-app us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sp-demo-java-app-repo/sp-demo-java-app:${{ github.sha }}
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sp-demo-java-app-repo/sp-demo-java-app:${{ github.sha }}

      # Get GKE credentials
      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials sp-demo-java-app-cluster --region us-central1 --project ${{ secrets.GCP_PROJECT_ID }}

      # Deploy to GKE
      - name: Deploy to GKE
        run: |
          # Replace the image tag in the manifest with the current commit SHA
          sed -i "s|tag-placeholder|${{ github.sha }}|g" k8s/deployment.yaml
          # Apply the manifest to the GKE cluster
          kubectl apply -f k8s/deployment.yaml

  # Test stage
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Download SeaLights Java Agent
      - name: Download SeaLights Java Agent
        run: |
          wget -nv https://agents.sealights.co/sealights-java/sealights-java-latest.zip
          unzip -oq sealights-java-latest.zip -d sealights
          echo "SeaLights Java Agent version used is:"
          cat sealights/sealights-java-version.txt

      # Download Session ID artifact
      - name: Download Session ID
        uses: actions/download-artifact@v4
        with:
          name: session-id

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test