name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allows manual triggering for teardown

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Download SeaLights Java Agent
      - name: Download SeaLights Java Agent
        run: |
          wget -nv https://agents.sealights.co/sealights-java/sealights-java-latest.zip
          unzip -oq sealights-java-latest.zip -d sealights
          echo "SeaLights Java Agent version used is:"
          cat sealights/sealights-java-version.txt

      # Generate SeaLights Session ID with -config
      - name: Generate SeaLights Session ID
        env:
          SL_TOKEN: ${{ secrets.SL_TOKEN }}
          SL_APPNAME: ${{ secrets.SL_APPNAME }}
          SL_BUILDNAME: "build-${{ github.run_id }}"
          SL_BRANCHNAME: "${{ github.ref_name }}"
        run: |
          echo "SL.config running config command to generate session ID..."
          java -jar sealights/sl-build-scanner.jar -config \
            -appname "$SL_APPNAME" \
            -buildname "$SL_BUILDNAME" \
            -branchname "$SL_BRANCHNAME" \
            -token "$SL_TOKEN" \
            -pi "com.sealights.demoapp.*"
          echo "Output from SL.config command (session ID should be in buildSessionId.txt):"
          cat buildSessionId.txt

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      # Upload SeaLights session ID as an artifact
      - name: Upload Session ID
        uses: actions/upload-artifact@v4
        with:
          name: session-id
          path: buildSessionId.txt

  package:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Download SeaLights session ID artifact
      - name: Download Session ID
        uses: actions/download-artifact@v4
        with:
          name: session-id

      # Download SeaLights Java Agent
      - name: Download SeaLights Java Agent
        run: |
          wget -nv https://agents.sealights.co/sealights-java/sealights-java-latest.zip
          unzip -oq sealights-java-latest.zip -d sealights
          echo "SeaLights Java Agent version used is:"
          cat sealights/sealights-java-version.txt

      # Scan the build with SeaLights
      - name: Scan Build with SeaLights
        env:
          SL_TOKEN: ${{ secrets.SL_TOKEN }}
        run: |
          SESSION_ID=$(cat buildSessionId.txt)
          echo "Session ID: $SESSION_ID"
          echo "Scanning build with SeaLights..."
          java -jar sealights/sl-build-scanner.jar -scan \
            -token "$SL_TOKEN" \
            -buildsessionid "$SESSION_ID" \
            -workspacepath "build/libs" \
            -fi "*.jar" || {
              echo "Error: Scan command failed."
              exit 1
            }

      # Build Docker image
      - name: Build Docker image
        run: |
           chmod +x ./gradlew
          ./gradlew bootBuildImage
          docker build -t sp-demo-java-app .

      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Set up gcloud CLI
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Debug: List Artifact Registry Repositories
      - name: List Artifact Registry Repositories
        run: |
          gcloud artifacts repositories list --location=us-central1

      # Configure Docker to use gcloud for Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Push Docker image to Artifact Registry
      - name: Push Docker image to Artifact Registry
        run: |
          docker tag sp-demo-java-app us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sp-demo-java-app-repo/sp-demo-java-app:${{ github.sha }}
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sp-demo-java-app-repo/sp-demo-java-app:${{ github.sha }}

  unit-test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run unit tests
        run: ./gradlew test

  deploy:
    needs: [package, unit-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Set up gcloud CLI
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Install gke-gcloud-auth-plugin
      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          gke-gcloud-auth-plugin --version

      # Debug: List GKE Clusters
      - name: List GKE Clusters
        run: |
          gcloud container clusters list --region us-central1

      # Get GKE credentials
      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials sp-demo-java-app-cluster --region us-central1 --project ${{ secrets.GCP_PROJECT_ID }}

      # Deploy to GKE
      - name: Deploy to GKE
        run: |
          sed -i "s|tag-placeholder|${{ github.sha }}|g" k8s/deployment.yaml
          kubectl apply -f k8s/deployment.yaml

      # Get Service External IP
      - name: Get Service External IP
        run: |
          echo "Waiting for external IP to be assigned..."
          for i in {1..12}; do
            EXTERNAL_IP=$(kubectl get svc sp-demo-java-app-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$EXTERNAL_IP" ]; then
              echo "App is accessible at: http://$EXTERNAL_IP"
              break
            fi
            echo "External IP not yet assigned, waiting 10 seconds..."
            sleep 10
          done
          if [ -z "$EXTERNAL_IP" ]; then
            echo "Error: Could not get external IP after 2 minutes."
            exit 1
          fi

  integration-test:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Placeholder for integration tests
      - name: Run integration tests
        run: |
          echo "Running integration tests (placeholder)..."
          # Replace with your integration test command, e.g., ./gradlew integrationTest

  teardown:
    needs: integration-test
    if: github.event_name == 'workflow_dispatch'  # Only run on manual trigger
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Set up gcloud CLI
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Install gke-gcloud-auth-plugin
      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          gke-gcloud-auth-plugin --version

      # Debug: List GKE Clusters
      - name: List GKE Clusters
        run: |
          gcloud container clusters list --region us-central1

      # Get GKE credentials
      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials sp-demo-java-app-cluster --region us-central1 --project ${{ secrets.GCP_PROJECT_ID }}

      # Tear down the deployed app
      - name: Tear Down Application
        run: |
          echo "Deleting Deployment and Service..."
          kubectl delete -f k8s/deployment.yaml || {
            echo "Error: Failed to delete resources. They may not exist."
          }
          echo "Verifying resources are deleted..."
          kubectl get deployment sp-demo-java-app || echo "Deployment sp-demo-java-app not found (already deleted)."
          kubectl get svc sp-demo-java-app-service || echo "Service sp-demo-java-app-service not found (already deleted)."