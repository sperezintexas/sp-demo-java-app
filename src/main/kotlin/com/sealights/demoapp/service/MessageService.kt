package com.sealights.demoapp.service

import com.sealights.demoapp.data.Message
import com.sealights.demoapp.repository.MessageRepository
import org.slf4j.LoggerFactory
import org.springframework.data.repository.findByIdOrNull
import org.springframework.stereotype.Service

@Service
class MessageService(private val messageRepository: MessageRepository) {
    private val logger = LoggerFactory.getLogger(MessageService::class.java)

    fun findMessages(): List<Message> = messageRepository.findAll().toList()

    fun findMessageById(id: Long): Message? = messageRepository.findByIdOrNull(id)

    fun save(message: Message): Message {
        logger.info("Saving message: $message")
        try {
            // Always create a new message with ID generated by the database
            // This ensures we never try to update a message with a non-existent ID
            val messageToSave = message.copy(id = null)
            logger.info("Message to save (with null ID): $messageToSave")
            val savedMessage = messageRepository.save(messageToSave)
            logger.info("Message saved successfully: $savedMessage")
            return savedMessage
        } catch (e: Exception) {
            logger.error("Error saving message: ${e.message}", e)
            throw e
        }
    }
}
